{"/home/travis/build/npmtest/node-npmtest-pdfjs/test.js":"/* istanbul instrument in package npmtest_pdfjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pdfjs/lib.npmtest_pdfjs.js":"/* istanbul instrument in package npmtest_pdfjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pdfjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pdfjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pdfjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pdfjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pdfjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pdfjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pdfjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pdfjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pdfjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pdfjs.__dirname + '/lib.npmtest_pdfjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pdfjs/node_modules/pdfjs/lib/index.js":"'use strict'\n\nconst util = require('./util')\n\nexports.Document = require('./document')\nexports.Font = require('./font')\n\nconst PDFImage = require('./image/pdf')\nconst JPEGImage = require('./image/jpeg')\n\nexports.Image = class Image {\n  constructor(b) {\n    const src = util.toArrayBuffer(b)\n\n    switch (determineType(src)) {\n      case 'pdf':\n        return new PDFImage(src)\n      case 'jpeg':\n        return new JPEGImage(src)\n      default:\n        throw new TypeError('Unsupported image type')\n    }\n  }\n}\n\nfunction determineType(buffer) {\n  const pdf = String.fromCharCode.apply(null, new Uint8Array(buffer, 0, 5))\n  if (pdf === '%PDF-') {\n    return 'pdf'\n  }\n\n  const view = new DataView(buffer)\n  if (view.getUint8(0) === 0xff || view.getUint8(1) === 0xd8) {\n    return 'jpeg'\n  }\n\n  return null\n}\n\nexports.ExternalDocument = require('./external')\n\nexports.mm = 0.0393700787 * 72\nexports.cm = exports.mm * 10\n","/home/travis/build/npmtest/node-npmtest-pdfjs/node_modules/pdfjs/lib/util.js":"'use strict'\n\n// Converts a hex color expr. like #123456 into an array [r, g, b],\n// where r, g, b are in the range of 0 and 1\nexports.colorToRgb = function(hex) {\n  if (hex === undefined || hex === null) {\n    return\n  }\n\n  if (typeof hex === 'string') {\n    hex = parseInt(hex.replace('#', ''), 16)\n  }\n\n  const r = (hex >> 16) / 255\n  const g = ((hex >> 8) & 255) / 255\n  const b = (hex & 255) / 255\n\n  return [r, g, b]\n}\n\nexports.rgbEqual = function(lhs, rhs) {\n  return lhs && rhs && lhs[0] === rhs[0] && lhs[1] === rhs[1] && lhs[2] === rhs[2]\n}\n\nexports.toArrayBuffer = function(b) {\n  if (b instanceof ArrayBuffer) {\n    return b\n  } else {\n    return b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pdfjs/node_modules/pdfjs/lib/document.js":"'use strict'\n\nconst Cursor = require('./cursor')\nconst Fragment = require('./fragment')\nconst ops = require('./ops')\nconst PDF = require('./object')\nconst Readable = require('stream').Readable\nconst uuid = require('uuid')\nconst version = require('../package.json').version\nconst util = require('./util')\nconst ContentChunk = require('./content')\nconst ExternalDocument = require('./external')\nconst Font = require('./font/base')\n\n// constants\nconst RESOLVE = Promise.resolve()\n\nclass Document extends Readable {\n  constructor(opts) {\n    if (!opts) {\n      opts = {}\n    }\n\n    // readable stream options\n    super({\n      highWaterMark: opts.highWaterMark || 16384, // 16kB\n    })\n\n    this.version = '1.3'\n    this.info = {\n      id: uuid.v4(),\n      producer: `pdfjs v${version} (github.com/rkusa/pdfjs)`,\n      creationDate: new Date(),\n    }\n    this.width = opts.width || 595.296\n    this.height = opts.height || 841.896\n\n    this._nextObjectId = 1\n    this._xref = new PDF.Xref()\n    this._reading = false // wheater someone is reading data from the underlying Readable\n    this._length = 0 // keeps track of the total document length (in byte)\n\n    // header\n    const header = `%PDF-${this.version}\\n`\n      // The PDF format mandates that we add at least 4 commented binary characters\n      // (ASCII value >= 128), so that generic tools have a chance to detect\n      // that it's a binary file\n      + '%\\xFF\\xFF\\xFF\\xFF\\n\\n'\n\n    // a backlog of pending operations\n    this._pending = [\n      () => this._write(header)\n    ]\n    // this is the current operation that is executed (operations are executed sequentially)\n    this._pending.current = null\n\n    // init default styling opts\n    this.defaultFont = opts.font\n    this.defaultFontSize = opts.fontSize || 11\n    this.defaultColor = opts.color && util.colorToRgb(opts.color) || [0, 0, 0]\n    this.defaultLineHeight = opts.lineHeight || 1.15\n\n    if (!Font.isFont(this.defaultFont)) {\n      throw new TypeError('opts.font must be set to a valid default font')\n    }\n\n    // create document and page font dict\n    this._fonts = {}\n    this._xobjects = {}\n    this._pageFonts = {}\n\n    // these properties are used to keep track of used Font and Image objects and assign ids to\n    // them in a document-scoped way\n    this._aliases = new AliasGenerator()\n    this._mapping = new WeakMap()\n\n    // a page could consist out of multiple content chunks, which are keept track of using the\n    // following properties\n    this._currentContent = null\n    this._contents = []\n    this._contentObjCreator = null\n\n    // this array can be used to register callbacks that are executed when finalizing the document\n    // e.g. rendering the total page count\n    this._finalize = []\n\n    this._header = this._footer = this._template = null\n\n    // init cursor\n    this.padding = opts.padding >= 0 ? opts.padding : 20\n    this._cursor = new Cursor(\n      this.width - this.padding*2, this.height - this.padding*2, // width, height\n      this.padding, this.height - this.padding // x, y\n    )\n\n    // init pages catalog\n    this._pages = new PDF.Array()\n    this._pagesObj = new PDF.Object('Pages')\n    this._registerObject(this._pagesObj)\n\n    // init color space\n    this._colorSpace = new PDF.Object()\n    const iccProfile = require('./sRGB_IEC61966-2-1_black_scaled')\n    this._colorSpace.content = 'stream\\n' + iccProfile + '\\nendstream\\n'\n    this._colorSpace.prop('Length', iccProfile.length)\n    this._colorSpace.prop('N', 3)\n    this._colorSpace.prop('Alternate', 'DeviceRGB')\n    // this._colorSpace.prop('Filter', new PDF.Array([\n    //   new PDF.Name('ASCII85Decode'), new PDF.Name('FlateDecode')\n    // ]))\n    this._colorSpace.prop('Filter', new PDF.Name('ASCII85Decode'))\n\n    // start to work the _pending queue\n    this._next()\n  }\n\n  /// private API\n\n  _next() {\n    // return if there is already an operation worked on\n    if (this._pending.current) {\n      return this._pending.current\n    }\n\n    // variables used to traverse the nested queue\n    let parent = this._pending\n    let next = parent[0]\n\n    // if there is nothing in the queue, we are done here\n    if (!next) {\n      return RESOLVE\n    }\n\n    // the operation queue is a nested array, e.g.: [op1, [op2, op3, [ op4 ]], op5]\n    // it is therefore necessary traverse the first element until the first non array element\n    // is encountered\n    while (Array.isArray(next)) {\n      // if the first element is an empty array, remove it and start over\n      if (next.length === 0) {\n        parent.shift()\n        return this._next()\n      }\n\n      parent = next\n      next = next[0]\n    }\n\n    // remove next from the queue\n    parent.shift()\n\n    // TODO: still necessary?\n    // if (!next) {\n    //   return this._next()\n    // }\n\n    // return and set the current operation that is being executed\n    return this._pending.current = next().then(() => {\n      // once the execution finished, continue in the queue\n      this._pending.current = null\n      return this._next()\n    })\n  }\n\n  // This is method is used by Node.js stream.Readable class, which we inherit from.\n  // The method is called, if data is available from the resource, which means that we should\n  // start pushing data into the read queue (using `this.push(dataChunk)`). It should continue\n  // reading from the resoruce and pushing data until `this.push()` return `false`. Only when it\n  // is called again aft it has stopped should it resume pushing additional data onto the\n  // read queue.\n  _read(/* size */) {\n    this._reading = true\n    this.emit('read')\n  }\n\n  // This method is used to push data onto the read queue. If the Readable stream is currently\n  // not read from, the writing is postponed.\n  _write(chunk) {\n    if (this._reading) {\n      if (!this.push(chunk, 'binary')) {\n        this._reading = false\n      }\n      this._length += chunk.length\n      return RESOLVE\n    } else {\n      return new Promise(resolve => {\n        this.once('read', () => {\n          resolve(this._write(chunk))\n        })\n      })\n    }\n  }\n\n  _useFont(font) {\n    let alias\n    if (this._mapping.has(font)) {\n      alias = this._mapping.get(font)\n      // if the alias exists but is now blocked (e.g. because of having set a new template with\n      // colliding aliases), remove the mapping and unset the alias to force creation of a new one\n      if (this._aliases.isBlocked(alias)) {\n        this._mapping.delete(font)\n        alias = undefined\n      }\n    }\n\n    if (!alias) {\n      alias = new PDF.Name(this._aliases.next('F'))\n      this._mapping.set(font, alias)\n\n      const fontObj = new PDF.Object('Font')\n      this._fonts[alias] = { f: font, o: fontObj }\n      this._registerObject(fontObj)\n    }\n\n    if (this._currentContent && !(alias in this._currentContent._fonts)) {\n      this._currentContent._fonts[alias] = this._fonts[alias].o.toReference()\n    }\n\n    return alias\n  }\n\n  _useXObject(xobj) {\n    let alias\n    if (this._mapping.has(xobj)) {\n      alias = this._mapping.get(xobj)\n      // if the alias exists but is now blocked (e.g. because of having set a new template with\n      // colliding aliases), remove the mapping and unset the alias to force creation of a new one\n      if (this._aliases.isBlocked(alias)) {\n        this._mapping.delete(xobj)\n        alias = undefined\n      }\n    }\n\n    if (!alias) {\n      alias = new PDF.Name(this._aliases.next('X'))\n      this._mapping.set(xobj, alias)\n\n      const xobjObjs = []\n      for (let i = 0; i < xobj.xobjCount; ++i) {\n        const xobjObj = new PDF.Object('XObject')\n        this._registerObject(xobjObj)\n        xobjObjs.push(xobjObj)\n      }\n      this._xobjects[alias] = { x: xobj, o: xobjObjs }\n    }\n\n    if (this._currentContent && !(alias in this._currentContent._xobjects)) {\n      for (let i = 0; i < this._xobjects[alias].o.length; ++i) {\n        this._currentContent._xobjects[alias + '.' + i] = this._xobjects[alias].o[i].toReference()\n      }\n    }\n\n    const aliases = []\n    for (let i = 0; i < this._xobjects[alias].o.length; ++i) {\n      aliases.push(alias + '.' + i)\n    }\n    return aliases\n  }\n\n  async _startPage() {\n    if (this._currentPage) {\n      throw new Error('There is already a started page')\n    }\n\n    const page = this._currentPage = new PDF.Object('Page')\n    this._pages.push(page.toReference())\n\n    await this._startContentObject()\n\n    if (this._header) {\n      this._aliases.reset('H')\n      let chunk = ''\n      for (const i in this._header._objects) {\n        const obj = this._header._objects[i]\n        const alias = new PDF.Name(this._aliases.next('H'))\n        this._currentContent._xobjects[alias] = obj.toReference()\n        chunk += ops.Do(alias)\n      }\n\n      await this._write(chunk)\n      await this._header._render()\n    }\n\n    if (this._footer) {\n      this._aliases.reset('F')\n      let chunk = ''\n      for (const i in this._footer._objects) {\n        const obj = this._footer._objects[i]\n        const alias = new PDF.Name(this._aliases.next('F'))\n        this._currentContent._xobjects[alias] = obj.toReference()\n        chunk += ops.Do(alias)\n      }\n\n      await this._write(chunk)\n      await this._footer._render()\n    }\n\n    this._cursor.reset()\n\n    if (this._header) {\n      this._cursor.y -= this._header.height\n    }\n\n    if (this._footer) {\n      this._cursor.bottomOffset = this._footer.height\n    }\n  }\n\n  async _endPage() {\n    if (!this._currentPage) {\n      return\n    }\n\n    await this._endContentObject()\n\n    const fonts = new PDF.Dictionary({})\n    const xobjects = new PDF.Dictionary({})\n\n    for (const content of this._contents) {\n      for (const alias in content._fonts) {\n        fonts.add(alias, content._fonts[alias])\n      }\n\n      for (const alias in content._xobjects) {\n        xobjects.add(alias, content._xobjects[alias])\n      }\n    }\n\n    const page = this._currentPage\n    page.prop('Parent', this._pagesObj.toReference())\n\n    const colorSpace = new PDF.Dictionary({})\n    page.prop('Resources', new PDF.Dictionary({\n      ColorSpace: colorSpace,\n      ProcSet: new PDF.Array([\n        new PDF.Name('PDF'),\n        new PDF.Name('Text'),\n        new PDF.Name('ImageB'),\n        new PDF.Name('ImageC'),\n        new PDF.Name('ImageI')\n      ]),\n      Font:    fonts,\n      XObject: xobjects\n    }))\n\n    const contents = this._contents.map(c => c._object.toReference())\n    page.prop('Contents', new PDF.Array(contents))\n\n    let hasColorSpace = false\n\n    if (this._template) {\n      contents.unshift.apply(contents, this._template.contents)\n\n      for (const alias in this._template.colorSpaces) {\n        colorSpace.dictionary[alias] = this._template.colorSpaces[alias]\n        hasColorSpace = true\n      }\n\n      for (const alias in this._template.fonts) {\n        fonts.dictionary[alias] = this._template.fonts[alias]\n      }\n\n      for (const alias in this._template.xobjects) {\n        xobjects.dictionary[alias] = this._template.xobjects[alias]\n      }\n    }\n\n    if (!hasColorSpace) {\n      this._registerObject(this._colorSpace)\n      colorSpace.add('CS1', new PDF.Array([new PDF.Name('ICCBased'), this._colorSpace.toReference()]))\n    } else {\n      // re-use colorSpace\n      if (!colorSpace.has('CS1')) {\n        // create reference for CS1 alias\n        for (const alias in colorSpace.dictionary) {\n          colorSpace.dictionary[new PDF.Name('CS1')] = colorSpace.dictionary[alias]\n          break // only interested in the first element\n        }\n      }\n    }\n\n    await this._writeObject(page)\n\n    this._currentContent = this._currentPage = null\n    this._contents.length = 0\n  }\n\n  async _pageBreak(/* level */) {\n    if (!this._currentPage) {\n      await this._startPage()\n    }\n\n    await this._cursor.reset()\n\n    await this._endPage()\n    await this._startPage()\n  }\n\n  async _startContentObject(obj, force) {\n    // do not create new content object, if current content object is still empty\n    // 16 = /CS1 CS\n    //      /CS1 cs\n    if (!force && this._length - 16 == this._contentStart) {\n      return this._currentContent\n    }\n\n    if (this._currentContent) {\n      await this._endContentObject()\n    }\n\n    if (this._contentObjCreator) {\n      obj = this._contentObjCreator()\n    }\n\n    const content = this._currentContent = new ContentChunk(this, obj)\n    this._contents.push(content)\n\n    this._xref.add(content._object.id, this._length, content._object)\n\n    let chunk = content._object.id + ' ' + content._object.rev + ' obj\\n'\n      + content._object.properties.toString() + '\\n'\n      + 'stream\\n'\n\n    this._contentStart = this._length + chunk.length\n\n    // set color space\n    chunk += ops.CS('/CS1') + ops.cs('/CS1')\n    await this._write(chunk)\n\n    return content\n  }\n\n  async _endContentObject() {\n    if (!this._currentContent) {\n      return\n    }\n\n    this._currentContent._length.content = this._length - this._contentStart - 1\n    if (this._currentContent._length.content < 0) {\n      this._currentContent._length.content = 0\n    }\n\n    const chunk = 'endstream\\nendobj\\n\\n'\n    await this._write(chunk)\n    await this._writeObject(this._currentContent._length)\n\n    this._currentContent = null\n  }\n\n  _registerObject(object, force) {\n    if (object instanceof PDF.Stream) {\n      object = object.object\n    }\n\n    if (!force && object.id) {\n      return\n    }\n\n    object.id = this._nextObjectId\n    this._nextObjectId++\n  }\n\n  _writeObject(object) {\n    if (object instanceof PDF.Stream) {\n      object = object.object\n    }\n\n    if (!object.id) {\n      this._registerObject(object)\n    }\n\n    this._xref.add(object.id, this._length, object)\n    return this._write(object.toString() + '\\n\\n')\n  }\n\n  // public API\n\n  async end() {\n    await this._next()\n    await this._endPage()\n\n    for (const fn of this._finalize) {\n      await fn()\n    }\n\n    this._pagesObj.prop('MediaBox', new PDF.Array([0, 0, this.width, this.height]))\n    this._pagesObj.prop('Kids', this._pages)\n    this._pagesObj.prop('Count', this._pages.length)\n    await this._writeObject(this._pagesObj)\n    if (this._colorSpace.id) {\n      // only write colorspace if it is actually used (can tell by id being set)\n      await this._writeObject(this._colorSpace)\n    }\n\n    for (const alias in this._fonts) {\n      const font = this._fonts[alias]\n      await font.f.write(this, font.o)\n    }\n\n    for (const alias in this._xobjects) {\n      const xobj = this._xobjects[alias]\n      await xobj.x.write(this, xobj.o)\n    }\n\n    const catalog = new PDF.Object('Catalog')\n    catalog.prop('Pages', this._pagesObj.toReference())\n    await this._writeObject(catalog)\n\n    // to support random access to individual objects, a PDF file\n    // contains a cross-reference table that can be used to locate\n    // and directly access pages and other important objects within the file\n    const startxref = this._length\n    await this._write(this._xref.toString())\n\n    // trailer\n    const objectsCount = this._nextObjectId - 1\n    const trailer = new PDF.Trailer(objectsCount + 1, catalog, this.info)\n    await this._write(trailer.toString() + '\\n')\n\n    // startxref\n    await this._write('startxref\\n' + startxref + '\\n%%EOF')\n\n    // close readable stream\n    this.push(null)\n  }\n}\n\nclass AliasGenerator {\n  constructor() {\n    this.nextId = {}\n    this.blocked = new Set()\n  }\n\n  next(prefix) {\n    if (!(prefix in this.nextId)) {\n      this.nextId[prefix] = 1\n    }\n\n    let next\n    do {\n      next = prefix + this.nextId[prefix]++\n    } while (this.blocked.has(next))\n\n    return next\n  }\n\n  block(alias) {\n    alias = String(alias)\n    if (alias[0] === '/') {\n      alias = alias.slice(1)\n    }\n\n    this.blocked.add(alias)\n  }\n\n  isBlocked(alias) {\n    alias = String(alias)\n    if (alias[0] === '/') {\n      alias = alias.slice(1)\n    }\n\n    return this.blocked.has(alias)\n  }\n\n  reset(prefix) {\n    this.nextId[prefix] = 1\n  }\n}\n\nmodule.exports = class extends Fragment {\n  constructor(opts) {\n    const doc = new Document(opts)\n    super(doc, doc)\n  }\n\n  get info() {\n    return this._doc.info\n  }\n\n  pipe(dest, opts) {\n    return this._doc.pipe(dest, opts)\n  }\n\n  async end() {\n    await Fragment.prototype.end.call(this)\n    await this._doc.end()\n  }\n\n  header() {\n    const Header = require('./header')\n    const ctx = new Header(this._doc, this)\n    this._begin(ctx)\n\n    this._pending.push(() => {\n      this._doc._header = ctx\n      return ctx._start()\n    })\n\n    return ctx\n  }\n\n  footer() {\n    const Footer = require('./footer')\n    const ctx = new Footer(this._doc, this)\n    this._begin(ctx)\n\n    this._pending.push(() => {\n      this._doc._footer = ctx\n      return ctx._start()\n    })\n\n    return ctx\n  }\n\n  addPagesOf(external) {\n    if (!(external instanceof ExternalDocument)) {\n      throw new TypeError('argument must be of type ExternalDocument')\n    }\n\n    this._begin(null)\n    this._pending.push(() => external.write(this._doc))\n  }\n\n  addPageOf(page, external) {\n    if (!(external instanceof ExternalDocument)) {\n      throw new TypeError('argument must be of type ExternalDocument')\n    }\n\n    if (!page || page < 1 || page > external.pageCount) {\n      throw new TypeError('ExternalDocument does not have page ' + page)\n    }\n\n    this._begin(null)\n    this._pending.push(() => external.write(this._doc, page))\n  }\n\n  setTemplate(external) {\n    if (!(external instanceof ExternalDocument)) {\n      throw new TypeError('argument must be of type ExternalDocument')\n    }\n\n    this._begin(null)\n    this._pending.push(() => external.setAsTemplate(this._doc))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pdfjs/node_modules/pdfjs/font/afm/convert.js":"const fs = require('fs')\nconst path = require('path')\n\n// thanks to https://github.com/prawnpdf/prawn\nconst CODE_TO_NAME = fs.readFileSync(\n  path.join(__dirname, 'winansi_characters.txt'),\n  'utf8'\n).split(/\\s+/)\n\nconst NAME_TO_CODE = {}\nCODE_TO_NAME.forEach((v, k) => NAME_TO_CODE[v] = k)\n\nconst files = fs.readdirSync(__dirname)\nfor (const filename of files) {\n  if (path.extname(filename) !== '.afm') {\n    continue\n  }\n\n  const data = fs.readFileSync(path.join(__dirname, filename), 'utf8')\n\n  const properties = {}\n  const glyphWidths = {}\n  const kerning = {}\n\n  const lines = data.split('\\r\\n')\n  for (let i = 0; i < lines.length; ++i) {\n    const line = lines[i]\n    const match = line.match(/^([A-Z]\\w+)\\s+(.*)/)\n    if (!match) {\n      continue\n    }\n\n    const key = match[1][0].toLowerCase() + match[1].slice(1)\n    const val = match[2]\n\n    switch (key) {\n    case 'startCharMetrics':\n      const metrics = lines.splice(i + 1, parseInt(val))\n\n      metrics.forEach(function(metric) {\n        const name = metric.match(/\\bN\\s+(\\.?\\w+)\\s*;/)[1]\n        glyphWidths[name] = parseInt(metric.match(/\\bWX\\s+(\\d+)\\s*;/)[1], 10)\n      })\n      // C 32 ; WX 278 ; N space ; B 0 0 0 0 ;\n\n      break\n\n    case 'startKernPairs':\n      const pairs = lines.splice(i + 1, parseInt(val))\n\n      for (const pair of pairs) {\n        // KPX o comma -40\n        const values = pair.split(' ')\n        const left = NAME_TO_CODE[values[1]]\n        const right = NAME_TO_CODE[values[2]]\n\n        if (left === undefined || right === undefined) {\n          continue\n        }\n\n        if (!kerning[left]) {\n          kerning[left] = {}\n        }\n\n        kerning[left][right] = parseFloat(values[3], 10)\n      }\n\n      break\n\n    // number\n    case 'capHeight':\n    case 'xHeight':\n    case 'ascender':\n    case 'descender':\n    // case 'underlineThickness':\n    case 'italicAngle':\n      properties[key] = parseFloat(val, 10)\n      break\n\n    // number array\n    case 'fontBBox':\n      properties[key] = val.split(/\\s+/g)\n        .filter(v => v !== '')\n        .map(v => parseFloat(v, 10))\n      break\n\n    // string\n    case 'fontName':\n    case 'fullName':\n    case 'familyName':\n    case 'characterSet':\n      properties[key] = val\n      break\n\n    // ignore other properties\n    default:\n      // console.log('property', key, 'ignored')\n      break\n    }\n  }\n\n  properties.kerning = kerning\n\n  const widths = new Array(256)\n  for (let i = 0; i < 256; ++i) {\n    widths[i] = glyphWidths[CODE_TO_NAME[i]]\n  }\n\n  properties.widths = widths\n\n  fs.writeFileSync(\n    path.join(__dirname, '../', path.basename(filename, '.afm') + '.json'),\n    JSON.stringify(properties),\n    { encoding: 'utf8' }\n  )\n  // console.log(widths)\n  // console.log(properties)\n  // console.log(kerning)\n}\n"}